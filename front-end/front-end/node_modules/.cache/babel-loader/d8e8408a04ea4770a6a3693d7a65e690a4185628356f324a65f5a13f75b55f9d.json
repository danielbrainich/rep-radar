{"ast":null,"code":"const fetchOpenSecretsIds=async url=>{const response=await fetch(url);if(!response.ok){throw new Error(\"HTTP error. Status: \".concat(response.status));}return response.json();};const getOpenSecretsId=async(repState,repId)=>{const apiUrl=\"\".concat(process.env.REACT_APP_API_URL,\"/api/open_secrets/ids/\").concat(repState);console.log(\"reppppid\",repId);try{const data=await fetchOpenSecretsIds(apiUrl);console.log(\"OPENSECRETSIDS\",data);for(let rep of data.response.legislator){if(rep['@attributes'].bioguide_id===repId){return{'repId':rep['@attributes'].cid};}}return{'repId':null};}catch(error){console.error('Error fetching data:',error);return{'repId':'','error':true,'errorMessage':error.message};}};export default getOpenSecretsId;","map":{"version":3,"names":["fetchOpenSecretsIds","url","response","fetch","ok","Error","concat","status","json","getOpenSecretsId","repState","repId","apiUrl","process","env","REACT_APP_API_URL","console","log","data","rep","legislator","bioguide_id","cid","error","message"],"sources":["/Users/dbrainy/dev/clean rep radar/rep-radar/front-end/src/api/openSecretsIds.js"],"sourcesContent":["const fetchOpenSecretsIds = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst getOpenSecretsId = async (repState, repId) => {\n    const apiUrl = `${process.env.REACT_APP_API_URL}/api/open_secrets/ids/${repState}`;\n    console.log(\"reppppid\", repId)\n    try {\n        const data = await fetchOpenSecretsIds(apiUrl);\n        console.log(\"OPENSECRETSIDS\", data)\n        for (let rep of data.response.legislator) {\n            if (rep['@attributes'].bioguide_id === repId) {\n                return { 'repId': rep['@attributes'].cid };\n            }\n        }\n        return { 'repId': null };\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            'repId': '',\n            'error': true,\n            'errorMessage': error.message\n        };\n    }\n};\n\nexport default getOpenSecretsId;\n"],"mappings":"AAAA,KAAM,CAAAA,mBAAmB,CAAG,KAAO,CAAAC,GAAG,EAAK,CACvC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,GAAG,CAAC,CACjC,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,wBAAAC,MAAA,CAAwBJ,QAAQ,CAACK,MAAM,CAAE,CAAC,CAC7D,CACA,MAAO,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,KAAK,GAAK,CAChD,KAAM,CAAAC,MAAM,IAAAN,MAAA,CAAMO,OAAO,CAACC,GAAG,CAACC,iBAAiB,2BAAAT,MAAA,CAAyBI,QAAQ,CAAE,CAClFM,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEN,KAAK,CAAC,CAC9B,GAAI,CACA,KAAM,CAAAO,IAAI,CAAG,KAAM,CAAAlB,mBAAmB,CAACY,MAAM,CAAC,CAC9CI,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEC,IAAI,CAAC,CACnC,IAAK,GAAI,CAAAC,GAAG,GAAI,CAAAD,IAAI,CAAChB,QAAQ,CAACkB,UAAU,CAAE,CACtC,GAAID,GAAG,CAAC,aAAa,CAAC,CAACE,WAAW,GAAKV,KAAK,CAAE,CAC1C,MAAO,CAAE,OAAO,CAAEQ,GAAG,CAAC,aAAa,CAAC,CAACG,GAAI,CAAC,CAC9C,CACJ,CACA,MAAO,CAAE,OAAO,CAAE,IAAK,CAAC,CAC5B,CAAE,MAAOC,KAAK,CAAE,CACZP,OAAO,CAACO,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,CACH,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAEA,KAAK,CAACC,OAC1B,CAAC,CACL,CACJ,CAAC,CAED,cAAe,CAAAf,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}