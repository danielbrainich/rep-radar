{"ast":null,"code":"const fetchProPublicaMemberData = async () => {\n  const apiUrl = `http://localhost:8000/api/pro_publica/ids`;\n  try {\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching member data:', error);\n    throw error;\n  }\n};\nconst findMatchingMember = (data, repDistrict, repState) => {\n  console.log(\"DATA\", data);\n  console.log(\"STATE\", repState);\n  console.log(\"DISTRICT\", repDistrict);\n  let filteredMembers = data.results[0].members.filter(member => member.state.toLowerCase() === repState.toLowerCase() && String(member.district) === String(repDistrict));\n  return filteredMembers.length > 0 ? filteredMembers[0] : null;\n};\nconst getProPublicaIds = async (repDistrict, repState) => {\n  try {\n    const rawData = await fetchProPublicaMemberData();\n    console.log(rawData);\n    const matchingMember = findMatchingMember(rawData, repDistrict, repState);\n    if (matchingMember) {\n      console.log('Matching member found:', matchingMember);\n      return matchingMember;\n    } else {\n      console.log(`No match found for state: ${repState}, district: ${repDistrict}`);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error in getProPublicaIds:', error);\n    return {\n      error: true,\n      message: error.message,\n      data: null\n    };\n  }\n};\nexport default getProPublicaIds;","map":{"version":3,"names":["fetchProPublicaMemberData","apiUrl","response","fetch","ok","Error","status","json","error","console","findMatchingMember","data","repDistrict","repState","log","filteredMembers","results","members","filter","member","state","toLowerCase","String","district","length","getProPublicaIds","rawData","matchingMember","message"],"sources":["/Users/dbrainy/dev/clean rep radar/rep-report/front-end/src/api/proPublicaIds.js"],"sourcesContent":["const fetchProPublicaMemberData = async () => {\n    const apiUrl = `http://localhost:8000/api/pro_publica/ids`;\n\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching member data:', error);\n        throw error;\n    }\n};\n\nconst findMatchingMember = (data, repDistrict, repState) => {\n    console.log(\"DATA\", data)\n    console.log(\"STATE\", repState)\n    console.log(\"DISTRICT\", repDistrict)\n\n    let filteredMembers = data.results[0].members.filter(member =>\n        member.state.toLowerCase() === repState.toLowerCase() &&\n        String(member.district) === String(repDistrict)\n    );\n\n    return filteredMembers.length > 0 ? filteredMembers[0] : null;\n};\n\nconst getProPublicaIds = async (repDistrict, repState) => {\n    try {\n        const rawData = await fetchProPublicaMemberData();\n        console.log(rawData);\n        const matchingMember = findMatchingMember(rawData, repDistrict, repState);\n\n        if (matchingMember) {\n            console.log('Matching member found:', matchingMember);\n            return matchingMember;\n        } else {\n            console.log(`No match found for state: ${repState}, district: ${repDistrict}`);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error in getProPublicaIds:', error);\n        return {\n            error: true,\n            message: error.message,\n            data: null\n        };\n    }\n};\n\nexport default getProPublicaIds;\n"],"mappings":"AAAA,MAAMA,yBAAyB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,MAAM,GAAI,2CAA0C;EAE1D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;IACpC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC7D;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAME,kBAAkB,GAAGA,CAACC,IAAI,EAAEC,WAAW,EAAEC,QAAQ,KAAK;EACxDJ,OAAO,CAACK,GAAG,CAAC,MAAM,EAAEH,IAAI,CAAC;EACzBF,OAAO,CAACK,GAAG,CAAC,OAAO,EAAED,QAAQ,CAAC;EAC9BJ,OAAO,CAACK,GAAG,CAAC,UAAU,EAAEF,WAAW,CAAC;EAEpC,IAAIG,eAAe,GAAGJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,MAAM,CAACC,MAAM,IACvDA,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,KAAKR,QAAQ,CAACQ,WAAW,CAAC,CAAC,IACrDC,MAAM,CAACH,MAAM,CAACI,QAAQ,CAAC,KAAKD,MAAM,CAACV,WAAW,CAClD,CAAC;EAED,OAAOG,eAAe,CAACS,MAAM,GAAG,CAAC,GAAGT,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI;AACjE,CAAC;AAED,MAAMU,gBAAgB,GAAG,MAAAA,CAAOb,WAAW,EAAEC,QAAQ,KAAK;EACtD,IAAI;IACA,MAAMa,OAAO,GAAG,MAAM1B,yBAAyB,CAAC,CAAC;IACjDS,OAAO,CAACK,GAAG,CAACY,OAAO,CAAC;IACpB,MAAMC,cAAc,GAAGjB,kBAAkB,CAACgB,OAAO,EAAEd,WAAW,EAAEC,QAAQ,CAAC;IAEzE,IAAIc,cAAc,EAAE;MAChBlB,OAAO,CAACK,GAAG,CAAC,wBAAwB,EAAEa,cAAc,CAAC;MACrD,OAAOA,cAAc;IACzB,CAAC,MAAM;MACHlB,OAAO,CAACK,GAAG,CAAE,6BAA4BD,QAAS,eAAcD,WAAY,EAAC,CAAC;MAC9E,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MACHA,KAAK,EAAE,IAAI;MACXoB,OAAO,EAAEpB,KAAK,CAACoB,OAAO;MACtBjB,IAAI,EAAE;IACV,CAAC;EACL;AACJ,CAAC;AAED,eAAec,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}