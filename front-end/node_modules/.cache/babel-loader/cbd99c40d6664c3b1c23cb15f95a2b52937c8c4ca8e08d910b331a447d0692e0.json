{"ast":null,"code":"const fetchOpenSecretsData = async url => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`HTTP error. Status: ${response.status}`);\n  }\n  return response.json();\n};\nconst reshapeOpenSecretsSummary = data => {\n  function formatDollars(amount) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  }\n  return {\n    summary: {\n      cashOnHand: formatDollars(data.response.summary['@attributes'].cash_on_hand),\n      cycle: data.response.summary['@attributes'].cycle,\n      debt: formatDollars(data.response.summary['@attributes'].debt),\n      lastUpdated: data.response.summary['@attributes'].last_updated,\n      nextElection: data.response.summary['@attributes'].next_election,\n      origin: data.response.summary['@attributes'].origin,\n      spent: formatDollars(data.response.summary['@attributes'].spent),\n      total: formatDollars(data.response.summary['@attributes'].total)\n    }\n  };\n};\nconst getOpenSecretsSummary = async id => {\n  try {\n    const data = await fetchOpenSecretsData(`${process.env.REACT_APP_API_URL}/api/open_secrets/summary/${id}`);\n    return reshapeOpenSecretsSummary(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      summary: {},\n      error: true,\n      errorMessage: error.message\n    };\n  }\n};\nexport default getOpenSecretsSummary;","map":{"version":3,"names":["fetchOpenSecretsData","url","response","fetch","ok","Error","status","json","reshapeOpenSecretsSummary","data","formatDollars","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","summary","cashOnHand","cash_on_hand","cycle","debt","lastUpdated","last_updated","nextElection","next_election","origin","spent","total","getOpenSecretsSummary","id","process","env","REACT_APP_API_URL","error","console","errorMessage","message"],"sources":["/Users/dbrainy/dev/rep-radar/front-end/src/api/openSecretsSummary.js"],"sourcesContent":["const fetchOpenSecretsData = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst reshapeOpenSecretsSummary = (data) => {\n    function formatDollars(amount) {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format(amount);\n    }\n\n    return {\n        summary: {\n            cashOnHand: formatDollars(data.response.summary['@attributes'].cash_on_hand),\n            cycle: data.response.summary['@attributes'].cycle,\n            debt: formatDollars(data.response.summary['@attributes'].debt),\n            lastUpdated: data.response.summary['@attributes'].last_updated,\n            nextElection: data.response.summary['@attributes'].next_election,\n            origin: data.response.summary['@attributes'].origin,\n            spent: formatDollars(data.response.summary['@attributes'].spent),\n            total: formatDollars(data.response.summary['@attributes'].total),\n        }\n    };\n};\n\nconst getOpenSecretsSummary = async (id) => {\n    try {\n        const data = await fetchOpenSecretsData(`${process.env.REACT_APP_API_URL}/api/open_secrets/summary/${id}`);\n        return reshapeOpenSecretsSummary(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            summary: {},\n            error: true,\n            errorMessage: error.message\n        };\n    }\n};\n\nexport default getOpenSecretsSummary;\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,MAAOC,GAAG,IAAK;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;EAC7D;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMC,yBAAyB,GAAIC,IAAI,IAAK;EACxC,SAASC,aAAaA,CAACC,MAAM,EAAE;IAC3B,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;MAClCC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAE,KAAK;MACfC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IAC3B,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;EACrB;EAEA,OAAO;IACHQ,OAAO,EAAE;MACLC,UAAU,EAAEV,aAAa,CAACD,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACE,YAAY,CAAC;MAC5EC,KAAK,EAAEb,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACG,KAAK;MACjDC,IAAI,EAAEb,aAAa,CAACD,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACI,IAAI,CAAC;MAC9DC,WAAW,EAAEf,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACM,YAAY;MAC9DC,YAAY,EAAEjB,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACQ,aAAa;MAChEC,MAAM,EAAEnB,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACS,MAAM;MACnDC,KAAK,EAAEnB,aAAa,CAACD,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACU,KAAK,CAAC;MAChEC,KAAK,EAAEpB,aAAa,CAACD,IAAI,CAACP,QAAQ,CAACiB,OAAO,CAAC,aAAa,CAAC,CAACW,KAAK;IACnE;EACJ,CAAC;AACL,CAAC;AAED,MAAMC,qBAAqB,GAAG,MAAOC,EAAE,IAAK;EACxC,IAAI;IACA,MAAMvB,IAAI,GAAG,MAAMT,oBAAoB,CAAE,GAAEiC,OAAO,CAACC,GAAG,CAACC,iBAAkB,6BAA4BH,EAAG,EAAC,CAAC;IAC1G,OAAOxB,yBAAyB,CAACC,IAAI,CAAC;EAC1C,CAAC,CAAC,OAAO2B,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHjB,OAAO,EAAE,CAAC,CAAC;MACXiB,KAAK,EAAE,IAAI;MACXE,YAAY,EAAEF,KAAK,CAACG;IACxB,CAAC;EACL;AACJ,CAAC;AAED,eAAeR,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}