{"ast":null,"code":"import getCivicInfoData from './civicInfo';\nimport getOpenSecretsContributions from './openSecretsContributions';\nimport getOpenSecretsSummary from './openSecretsSummary';\nimport getProPublicaIds from './proPublicaIds';\nimport getProPublicaStatements from './proPublicaStatements';\nimport getCongressGovBills from './congressGovBills';\nimport getCongressGovPhoto from './congressGovPhoto';\nimport getNewsApiData from './newsApi';\nconst fetchRepData = async formData => {\n  const address = `${formData.streetAddress} ${formData.city} ${formData.state} ${formData.zipCode}`;\n  const repData = await getCivicInfoData(address);\n  const proPubInfo = await getProPublicaIds(repData.representative.district, repData.representative.state);\n  const allPromises = Promise.all([getCongressGovPhoto(proPubInfo.id), getCongressGovBills(proPubInfo.id), getProPublicaStatements(proPubInfo.id), getNewsApiData(repData.representative.name), getOpenSecretsContributions(proPubInfo.crp_id), getOpenSecretsSummary(proPubInfo.crp_id)]);\n  const [congressGovPhoto, sponsoredBillInfo, statements, news, contribData, contribSummary] = await allPromises;\n  const allRepData = {\n    representativeInfo: repData,\n    repContribData: contribData.contributions,\n    repContribSummary: contribSummary.summary,\n    proPublicaInfo: proPubInfo,\n    repPhoto: congressGovPhoto,\n    repSponsoredBills: sponsoredBillInfo,\n    repStatements: statements,\n    news: news\n  };\n  console.log(\"All Rep Data:\", allRepData);\n  return allRepData;\n};\nexport default fetchRepData;","map":{"version":3,"names":["getCivicInfoData","getOpenSecretsContributions","getOpenSecretsSummary","getProPublicaIds","getProPublicaStatements","getCongressGovBills","getCongressGovPhoto","getNewsApiData","fetchRepData","formData","address","streetAddress","city","state","zipCode","repData","proPubInfo","representative","district","allPromises","Promise","all","id","name","crp_id","congressGovPhoto","sponsoredBillInfo","statements","news","contribData","contribSummary","allRepData","representativeInfo","repContribData","contributions","repContribSummary","summary","proPublicaInfo","repPhoto","repSponsoredBills","repStatements","console","log"],"sources":["/Users/dbrainy/dev/rep-radar/front-end/src/api/fetchRepData.js"],"sourcesContent":["import getCivicInfoData from './civicInfo';\nimport getOpenSecretsContributions from './openSecretsContributions';\nimport getOpenSecretsSummary from './openSecretsSummary';\nimport getProPublicaIds from './proPublicaIds';\nimport getProPublicaStatements from './proPublicaStatements';\nimport getCongressGovBills from './congressGovBills';\nimport getCongressGovPhoto from './congressGovPhoto';\nimport getNewsApiData from './newsApi';\n\nconst fetchRepData = async (formData) => {\n    const address = `${formData.streetAddress} ${formData.city} ${formData.state} ${formData.zipCode}`;\n    const repData = await getCivicInfoData(address);\n    const proPubInfo = await getProPublicaIds(repData.representative.district, repData.representative.state);\n\n    const allPromises = Promise.all([\n        getCongressGovPhoto(proPubInfo.id),\n        getCongressGovBills(proPubInfo.id),\n        getProPublicaStatements(proPubInfo.id),\n        getNewsApiData(repData.representative.name),\n        getOpenSecretsContributions(proPubInfo.crp_id),\n        getOpenSecretsSummary(proPubInfo.crp_id)\n    ]);\n\n    const [\n        congressGovPhoto,\n        sponsoredBillInfo,\n        statements,\n        news,\n        contribData,\n        contribSummary\n    ] = await allPromises;\n\n    const allRepData =  {\n        representativeInfo: repData,\n        repContribData: contribData.contributions,\n        repContribSummary: contribSummary.summary,\n        proPublicaInfo: proPubInfo,\n        repPhoto: congressGovPhoto,\n        repSponsoredBills: sponsoredBillInfo,\n        repStatements: statements,\n        news: news,\n    };\n\n    console.log(\"All Rep Data:\", allRepData);\n    return allRepData;\n};\n\nexport default fetchRepData;\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,aAAa;AAC1C,OAAOC,2BAA2B,MAAM,4BAA4B;AACpE,OAAOC,qBAAqB,MAAM,sBAAsB;AACxD,OAAOC,gBAAgB,MAAM,iBAAiB;AAC9C,OAAOC,uBAAuB,MAAM,wBAAwB;AAC5D,OAAOC,mBAAmB,MAAM,oBAAoB;AACpD,OAAOC,mBAAmB,MAAM,oBAAoB;AACpD,OAAOC,cAAc,MAAM,WAAW;AAEtC,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EACrC,MAAMC,OAAO,GAAI,GAAED,QAAQ,CAACE,aAAc,IAAGF,QAAQ,CAACG,IAAK,IAAGH,QAAQ,CAACI,KAAM,IAAGJ,QAAQ,CAACK,OAAQ,EAAC;EAClG,MAAMC,OAAO,GAAG,MAAMf,gBAAgB,CAACU,OAAO,CAAC;EAC/C,MAAMM,UAAU,GAAG,MAAMb,gBAAgB,CAACY,OAAO,CAACE,cAAc,CAACC,QAAQ,EAAEH,OAAO,CAACE,cAAc,CAACJ,KAAK,CAAC;EAExG,MAAMM,WAAW,GAAGC,OAAO,CAACC,GAAG,CAAC,CAC5Bf,mBAAmB,CAACU,UAAU,CAACM,EAAE,CAAC,EAClCjB,mBAAmB,CAACW,UAAU,CAACM,EAAE,CAAC,EAClClB,uBAAuB,CAACY,UAAU,CAACM,EAAE,CAAC,EACtCf,cAAc,CAACQ,OAAO,CAACE,cAAc,CAACM,IAAI,CAAC,EAC3CtB,2BAA2B,CAACe,UAAU,CAACQ,MAAM,CAAC,EAC9CtB,qBAAqB,CAACc,UAAU,CAACQ,MAAM,CAAC,CAC3C,CAAC;EAEF,MAAM,CACFC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACVC,IAAI,EACJC,WAAW,EACXC,cAAc,CACjB,GAAG,MAAMX,WAAW;EAErB,MAAMY,UAAU,GAAI;IAChBC,kBAAkB,EAAEjB,OAAO;IAC3BkB,cAAc,EAAEJ,WAAW,CAACK,aAAa;IACzCC,iBAAiB,EAAEL,cAAc,CAACM,OAAO;IACzCC,cAAc,EAAErB,UAAU;IAC1BsB,QAAQ,EAAEb,gBAAgB;IAC1Bc,iBAAiB,EAAEb,iBAAiB;IACpCc,aAAa,EAAEb,UAAU;IACzBC,IAAI,EAAEA;EACV,CAAC;EAEDa,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEX,UAAU,CAAC;EACxC,OAAOA,UAAU;AACrB,CAAC;AAED,eAAevB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}