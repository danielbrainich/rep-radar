{"ast":null,"code":"const fetchOpenSecretsData = async url => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`HTTP error. Status: ${response.status}`);\n  }\n  return response.json();\n};\nconst reshapeOpenSecretsContributions = data => {\n  return {\n    contributions: {\n      contributors: data.response.contributors.contributor,\n      cycle: data.response.contributors['@attributes'].cycle,\n      notice: data.response.contributors['@attributes'].notice,\n      origin: data.response.contributors['@attributes'].origin\n    }\n  };\n};\nconst getOpenSecretsContributions = async cid => {\n  try {\n    const data = await fetchOpenSecretsData(`${process.env.REACT_APP_API_URL}/api/open_secrets/contributions/${cid}`);\n    return reshapeOpenSecretsContributions(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      contributions: {},\n      error: true,\n      errorMessage: error.message\n    };\n  }\n};\nexport default getOpenSecretsContributions;","map":{"version":3,"names":["fetchOpenSecretsData","url","response","fetch","ok","Error","status","json","reshapeOpenSecretsContributions","data","contributions","contributors","contributor","cycle","notice","origin","getOpenSecretsContributions","cid","process","env","REACT_APP_API_URL","error","console","errorMessage","message"],"sources":["/Users/dbrainy/dev/rep-radar/front-end/src/api/openSecretsContributions.js"],"sourcesContent":["const fetchOpenSecretsData = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst reshapeOpenSecretsContributions = (data) => {\n    return {\n        contributions: {\n            contributors: data.response.contributors.contributor,\n            cycle: data.response.contributors['@attributes'].cycle,\n            notice: data.response.contributors['@attributes'].notice,\n            origin: data.response.contributors['@attributes'].origin,\n        }\n    };\n};\n\nconst getOpenSecretsContributions = async (cid) => {\n    try {\n        const data = await fetchOpenSecretsData(`${process.env.REACT_APP_API_URL}/api/open_secrets/contributions/${cid}`);\n        return reshapeOpenSecretsContributions(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            contributions: {},\n            error: true,\n            errorMessage: error.message\n        };\n    }\n};\n\nexport default getOpenSecretsContributions;\n"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG,MAAOC,GAAG,IAAK;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;EAC7D;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMC,+BAA+B,GAAIC,IAAI,IAAK;EAC9C,OAAO;IACHC,aAAa,EAAE;MACXC,YAAY,EAAEF,IAAI,CAACP,QAAQ,CAACS,YAAY,CAACC,WAAW;MACpDC,KAAK,EAAEJ,IAAI,CAACP,QAAQ,CAACS,YAAY,CAAC,aAAa,CAAC,CAACE,KAAK;MACtDC,MAAM,EAAEL,IAAI,CAACP,QAAQ,CAACS,YAAY,CAAC,aAAa,CAAC,CAACG,MAAM;MACxDC,MAAM,EAAEN,IAAI,CAACP,QAAQ,CAACS,YAAY,CAAC,aAAa,CAAC,CAACI;IACtD;EACJ,CAAC;AACL,CAAC;AAED,MAAMC,2BAA2B,GAAG,MAAOC,GAAG,IAAK;EAC/C,IAAI;IACA,MAAMR,IAAI,GAAG,MAAMT,oBAAoB,CAAE,GAAEkB,OAAO,CAACC,GAAG,CAACC,iBAAkB,mCAAkCH,GAAI,EAAC,CAAC;IACjH,OAAOT,+BAA+B,CAACC,IAAI,CAAC;EAChD,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACHX,aAAa,EAAE,CAAC,CAAC;MACjBW,KAAK,EAAE,IAAI;MACXE,YAAY,EAAEF,KAAK,CAACG;IACxB,CAAC;EACL;AACJ,CAAC;AAED,eAAeR,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}