{"ast":null,"code":"const fetchProPublicaStatements=async repId=>{console.log(\"URL\",process.env.REACT_APP_API_URL);const apiUrl=\"\".concat(process.env.REACT_APP_API_URL,\"/api/pro_publica/statements/\").concat(repId);try{const response=await fetch(apiUrl);if(!response.ok){throw new Error(\"HTTP error. Status: \".concat(response.status));}return await response.json();}catch(error){console.error('Error fetching data:',error);throw error;}};const reshapeProPublicaResponse=data=>{return data;};const getProPublicaStatements=async repId=>{try{const rawData=await fetchProPublicaStatements(repId);const reshapedData=reshapeProPublicaResponse(rawData);return reshapedData;}catch(error){console.error('Error in getProPublicaStatements:',error);return{error:true,message:error.message||'An error occurred while fetching data',data:null};}};export default getProPublicaStatements;","map":{"version":3,"names":["fetchProPublicaStatements","repId","console","log","process","env","REACT_APP_API_URL","apiUrl","concat","response","fetch","ok","Error","status","json","error","reshapeProPublicaResponse","data","getProPublicaStatements","rawData","reshapedData","message"],"sources":["/Users/dbrainy/dev/deployed-rep-radar/rep-radar/front-end/src/api/proPublicaStatements.js"],"sourcesContent":["const fetchProPublicaStatements = async (repId) => {\n    console.log(\"URL\", process.env.REACT_APP_API_URL)\n    const apiUrl = `${process.env.REACT_APP_API_URL}/api/pro_publica/statements/${repId}`;\n\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error(`HTTP error. Status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n};\n\nconst reshapeProPublicaResponse = (data) => {\n    return data;\n};\n\nconst getProPublicaStatements = async (repId) => {\n    try {\n        const rawData = await fetchProPublicaStatements(repId);\n        const reshapedData = reshapeProPublicaResponse(rawData);\n        return reshapedData;\n    } catch (error) {\n        console.error('Error in getProPublicaStatements:', error);\n        return {\n            error: true,\n            message: error.message || 'An error occurred while fetching data',\n            data: null\n        };\n    }\n};\n\nexport default getProPublicaStatements;\n"],"mappings":"AAAA,KAAM,CAAAA,yBAAyB,CAAG,KAAO,CAAAC,KAAK,EAAK,CAC/CC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC,CACjD,KAAM,CAAAC,MAAM,IAAAC,MAAA,CAAMJ,OAAO,CAACC,GAAG,CAACC,iBAAiB,iCAAAE,MAAA,CAA+BP,KAAK,CAAE,CAErF,GAAI,CACA,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,MAAM,CAAC,CACpC,GAAI,CAACE,QAAQ,CAACE,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,wBAAAJ,MAAA,CAAwBC,QAAQ,CAACI,MAAM,CAAE,CAAC,CAC7D,CACA,MAAO,MAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAChC,CAAE,MAAOC,KAAK,CAAE,CACZb,OAAO,CAACa,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACf,CACJ,CAAC,CAED,KAAM,CAAAC,yBAAyB,CAAIC,IAAI,EAAK,CACxC,MAAO,CAAAA,IAAI,CACf,CAAC,CAED,KAAM,CAAAC,uBAAuB,CAAG,KAAO,CAAAjB,KAAK,EAAK,CAC7C,GAAI,CACA,KAAM,CAAAkB,OAAO,CAAG,KAAM,CAAAnB,yBAAyB,CAACC,KAAK,CAAC,CACtD,KAAM,CAAAmB,YAAY,CAAGJ,yBAAyB,CAACG,OAAO,CAAC,CACvD,MAAO,CAAAC,YAAY,CACvB,CAAE,MAAOL,KAAK,CAAE,CACZb,OAAO,CAACa,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,CACHA,KAAK,CAAE,IAAI,CACXM,OAAO,CAAEN,KAAK,CAACM,OAAO,EAAI,uCAAuC,CACjEJ,IAAI,CAAE,IACV,CAAC,CACL,CACJ,CAAC,CAED,cAAe,CAAAC,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}