{"ast":null,"code":"const fetchOpenSecretsData=async url=>{const response=await fetch(url);if(!response.ok){throw new Error(\"HTTP error. Status: \".concat(response.status));}return response.json();};const reshapeOpenSecretsContributions=data=>{return{contributions:{contributors:data.response.contributors.contributor,cycle:data.response.contributors['@attributes'].cycle,notice:data.response.contributors['@attributes'].notice,origin:data.response.contributors['@attributes'].origin}};};const getOpenSecretsContributions=async cid=>{try{const data=await fetchOpenSecretsData(\"http://localhost:8000/api/open_secrets/contributions/\".concat(cid));return reshapeOpenSecretsContributions(data);}catch(error){console.error('Error fetching data:',error);return{contributions:{},error:true,errorMessage:error.message};}};export default getOpenSecretsContributions;","map":{"version":3,"names":["fetchOpenSecretsData","url","response","fetch","ok","Error","concat","status","json","reshapeOpenSecretsContributions","data","contributions","contributors","contributor","cycle","notice","origin","getOpenSecretsContributions","cid","error","console","errorMessage","message"],"sources":["/Users/dbrainy/dev/clean rep radar/rep-radar/front-end/src/api/openSecretsContributions.js"],"sourcesContent":["const fetchOpenSecretsData = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst reshapeOpenSecretsContributions = (data) => {\n    return {\n        contributions: {\n            contributors: data.response.contributors.contributor,\n            cycle: data.response.contributors['@attributes'].cycle,\n            notice: data.response.contributors['@attributes'].notice,\n            origin: data.response.contributors['@attributes'].origin,\n        }\n    };\n};\n\nconst getOpenSecretsContributions = async (cid) => {\n    try {\n        const data = await fetchOpenSecretsData(`http://localhost:8000/api/open_secrets/contributions/${cid}`);\n        return reshapeOpenSecretsContributions(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            contributions: {},\n            error: true,\n            errorMessage: error.message\n        };\n    }\n};\n\nexport default getOpenSecretsContributions;\n"],"mappings":"AAAA,KAAM,CAAAA,oBAAoB,CAAG,KAAO,CAAAC,GAAG,EAAK,CACxC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,GAAG,CAAC,CACjC,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,wBAAAC,MAAA,CAAwBJ,QAAQ,CAACK,MAAM,CAAE,CAAC,CAC7D,CACA,MAAO,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAC,+BAA+B,CAAIC,IAAI,EAAK,CAC9C,MAAO,CACHC,aAAa,CAAE,CACXC,YAAY,CAAEF,IAAI,CAACR,QAAQ,CAACU,YAAY,CAACC,WAAW,CACpDC,KAAK,CAAEJ,IAAI,CAACR,QAAQ,CAACU,YAAY,CAAC,aAAa,CAAC,CAACE,KAAK,CACtDC,MAAM,CAAEL,IAAI,CAACR,QAAQ,CAACU,YAAY,CAAC,aAAa,CAAC,CAACG,MAAM,CACxDC,MAAM,CAAEN,IAAI,CAACR,QAAQ,CAACU,YAAY,CAAC,aAAa,CAAC,CAACI,MACtD,CACJ,CAAC,CACL,CAAC,CAED,KAAM,CAAAC,2BAA2B,CAAG,KAAO,CAAAC,GAAG,EAAK,CAC/C,GAAI,CACA,KAAM,CAAAR,IAAI,CAAG,KAAM,CAAAV,oBAAoB,yDAAAM,MAAA,CAAyDY,GAAG,CAAE,CAAC,CACtG,MAAO,CAAAT,+BAA+B,CAACC,IAAI,CAAC,CAChD,CAAE,MAAOS,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,CACHR,aAAa,CAAE,CAAC,CAAC,CACjBQ,KAAK,CAAE,IAAI,CACXE,YAAY,CAAEF,KAAK,CAACG,OACxB,CAAC,CACL,CACJ,CAAC,CAED,cAAe,CAAAL,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}