{"ast":null,"code":"const fetchOpenSecretsIds = async url => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`HTTP error. Status: ${response.status}`);\n  }\n  return response.json();\n};\nconst getOpenSecretsId = async (repState, repId) => {\n  const apiUrl = `http://localhost:8000/api/open_secrets/ids/${repState}`;\n  console.log(\"reppppid\", repId);\n  try {\n    const data = await fetchOpenSecretsIds(apiUrl);\n    console.log(\"OPENSECRETSIDS\", data);\n    for (let rep of data.response.legislator) {\n      if (rep['@attributes'].bioguide_id === repId) {\n        return {\n          'repId': rep['@attributes'].cid\n        };\n      }\n    }\n    return {\n      'repId': null\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return {\n      'repId': '',\n      'error': true,\n      'errorMessage': error.message\n    };\n  }\n};\nexport default getOpenSecretsId;","map":{"version":3,"names":["fetchOpenSecretsIds","url","response","fetch","ok","Error","status","json","getOpenSecretsId","repState","repId","apiUrl","console","log","data","rep","legislator","bioguide_id","cid","error","message"],"sources":["/Users/dbrainy/dev/clean rep radar/rep-report/front-end/src/api/openSecretsIds.js"],"sourcesContent":["const fetchOpenSecretsIds = async (url) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(`HTTP error. Status: ${response.status}`);\n    }\n    return response.json();\n};\n\nconst getOpenSecretsId = async (repState, repId) => {\n    const apiUrl = `http://localhost:8000/api/open_secrets/ids/${repState}`;\n    console.log(\"reppppid\", repId)\n    try {\n        const data = await fetchOpenSecretsIds(apiUrl);\n        console.log(\"OPENSECRETSIDS\", data)\n        for (let rep of data.response.legislator) {\n            if (rep['@attributes'].bioguide_id === repId) {\n                return { 'repId': rep['@attributes'].cid };\n            }\n        }\n        return { 'repId': null };\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return {\n            'repId': '',\n            'error': true,\n            'errorMessage': error.message\n        };\n    }\n};\n\nexport default getOpenSecretsId;\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,MAAOC,GAAG,IAAK;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;EAC7D;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,KAAK;EAChD,MAAMC,MAAM,GAAI,8CAA6CF,QAAS,EAAC;EACvEG,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,KAAK,CAAC;EAC9B,IAAI;IACA,MAAMI,IAAI,GAAG,MAAMd,mBAAmB,CAACW,MAAM,CAAC;IAC9CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,IAAI,CAAC;IACnC,KAAK,IAAIC,GAAG,IAAID,IAAI,CAACZ,QAAQ,CAACc,UAAU,EAAE;MACtC,IAAID,GAAG,CAAC,aAAa,CAAC,CAACE,WAAW,KAAKP,KAAK,EAAE;QAC1C,OAAO;UAAE,OAAO,EAAEK,GAAG,CAAC,aAAa,CAAC,CAACG;QAAI,CAAC;MAC9C;IACJ;IACA,OAAO;MAAE,OAAO,EAAE;IAAK,CAAC;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACH,OAAO,EAAE,EAAE;MACX,OAAO,EAAE,IAAI;MACb,cAAc,EAAEA,KAAK,CAACC;IAC1B,CAAC;EACL;AACJ,CAAC;AAED,eAAeZ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}